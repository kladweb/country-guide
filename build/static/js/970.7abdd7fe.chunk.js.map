{"version":3,"file":"static/js/970.7abdd7fe.chunk.js","mappings":"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","sources":["components/CountriesList/Country.tsx","webpack://country-guide_git/./src/styles/_variables.scss?9026","components/GlobeCountries/GlobeCountries.tsx","components/CountriesList/CountriesList.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './Country.scss';\r\n\r\ninterface deleteFavCountryType {\r\n  (\r\n    code: string,\r\n    showStar: boolean,\r\n    changeShowStar: React.Dispatch<React.SetStateAction<boolean>>,\r\n    changeShowCountry: React.Dispatch<React.SetStateAction<boolean>>\r\n  ): void\r\n}\r\n\r\ninterface toggleFavType {\r\n  (code: string,\r\n   showStar: boolean,\r\n   changeShowStar: React.Dispatch<React.SetStateAction<boolean>>\r\n  ): void\r\n}\r\n\r\ninterface openInfoType {\r\n  (code: string): void\r\n}\r\n\r\ninterface ICountryProps {\r\n  code: string;\r\n  name: string;\r\n  isFav: boolean;\r\n  deleteFavCountry: deleteFavCountryType;\r\n  toggleFav: toggleFavType;\r\n  openInfo: openInfoType;\r\n}\r\n\r\n\r\nconst Country: React.FC<ICountryProps> = ({code, name, isFav, deleteFavCountry, toggleFav, openInfo}) => {\r\n  const nodeRef = React.useRef(null);\r\n  const [showCountry, changeShowCountry] = useState<boolean>(false);\r\n  const [showStar, changeShowStar] = useState<boolean>(isFav);\r\n\r\n  return (\r\n    <CSSTransition\r\n      timeout={700}\r\n      nodeRef={nodeRef}\r\n      classNames='land'\r\n      in={!showCountry}\r\n      onExited={() => toggleFav(code, showStar, changeShowStar)}>\r\n      <div ref={nodeRef} className='Country'>\r\n        <div className={`flag-frame${isFav && showStar ? ' isFav' : ''}`}>\r\n          <img className='flag-preview' src={`/img/flags/${code}.png`} alt={name}/>\r\n          <span className={`country-title ${name.length > 24 ? 'country-title__small' : null}`}>{name}</span>\r\n          <div className='CountryLinks'>\r\n            <div className='CountryInfo'>\r\n              <button className='CountryInfo__title' onClick={() => openInfo(code)}>Information</button>\r\n            </div>\r\n            <button className='CountryInfo__title' onClick={() => {\r\n              deleteFavCountry(code, showStar, changeShowStar, changeShowCountry);\r\n            }}>\r\n              <span>Visited</span>\r\n              <div className=\"icon\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"17\" width=\"17\">\r\n                  <path\r\n                    d=\"M14.1891 6.37042L10.2219 5.79385L8.44847 2.19854C8.40003 2.1001 8.32034 2.02042 8.2219\r\n                1.97198C7.97503 1.8501 7.67503 1.95167 7.55159 2.19854L5.77815 5.79385L1.81097 6.37042C1.70159 6.38604\r\n                1.60159 6.4376 1.52503 6.51573C1.43247 6.61086 1.38146 6.73885 1.38322 6.87157C1.38498 7.0043 1.43936\r\n                7.13089 1.5344 7.22354L4.40472 10.022L3.72659 13.9735C3.71069 14.0655 3.72086 14.16 3.75595\r\n                14.2464C3.79105 14.3329 3.84966 14.4077 3.92514 14.4626C4.00062 14.5174 4.08995 14.55 4.183\r\n                14.5566C4.27605 14.5632 4.3691 14.5437 4.45159 14.5001L8.00003 12.6345L11.5485 14.5001C11.6453\r\n                14.5517 11.7578 14.5689 11.8657 14.5501C12.1375 14.5032 12.3203 14.2454 12.2735 13.9735L11.5953\r\n                10.022L14.4657 7.22354C14.5438 7.14698 14.5953 7.04698 14.611 6.9376C14.6532 6.66417 14.4625\r\n                6.41104 14.1891 6.37042Z\"\r\n                    fill={isFav && showStar ? 'yellow' : 'none'}\r\n                    stroke={isFav && showStar ? 'yellow' : '#FFF'}\r\n                    className=\"icon-star-path\"></path>\r\n                </svg>\r\n              </div>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\n// export default React.memo(Country);\r\nexport default Country;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"highlightColor\":\"#61ff10\",\"accentColor\":\"rgba(20,161,20,.78)\",\"borderColor1\":\"#ff0\",\"colorButton\":\"rgba(246,173,85,.8)\",\"colorMenu1\":\"#b1091d\"};","import ReactGlobe from 'react-globe.gl';\r\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\r\nimport variables from '../../styles/_variables.scss';\r\n\r\ninterface IGlobeProps {\r\n  listCodes: string[];\r\n  listNames: string[];\r\n  parentWidth: number;\r\n}\r\n\r\nexport const GlobeCountries: React.FC<IGlobeProps> = ({parentWidth, listCodes, listNames}) => {\r\n  const [polygons, setPolygons] = useState([]);\r\n  const globeRef = useRef<any>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    globeRef.current.controls().enableZoom = false;\r\n    fetch('/datasets/ne_110m_admin_0_countries.geojson')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        // console.log(data);\r\n        setPolygons(data.features);\r\n      });\r\n  }, [parentWidth]);\r\n\r\n  return (\r\n    <ReactGlobe\r\n      ref={globeRef}\r\n      width={parentWidth}\r\n      height={parentWidth < 900 ? parentWidth : 900}\r\n      polygonsData={polygons}\r\n      polygonCapColor={(d: any) => {\r\n        return (listCodes.includes(d.properties.ISO_A2.toLowerCase()) ||\r\n          listNames.includes(d.properties.BRK_NAME.toLowerCase())) ?\r\n          variables.colorMenu1 :\r\n          variables.accentColor;\r\n      }}\r\n      polygonSideColor={() => variables.colorButton}\r\n      polygonStrokeColor={() => variables.colorButton}\r\n      polygonAltitude={() => 0.02}\r\n      globeImageUrl={\"/img/shared/earth-day.jpg\"}\r\n      // bumpImageUrl=\"/img/shared/earth-topology.png\"\r\n      backgroundColor={'rgba(0,0,0,0)'}\r\n      labelsData={polygons}\r\n      labelText={(d: any) => d.properties.ISO_A2}\r\n      // labelSize={2}\r\n      labelColor={'blue'}\r\n      // labelResolution={2}\r\n    />\r\n  )\r\n}\r\n","import React, { RefObject, useLayoutEffect, useRef, useState } from \"react\";\r\nimport { Outlet, useNavigate, useParams } from 'react-router-dom';\r\nimport Country from './Country';\r\nimport { setOpenInfoBar } from \"../../redux/isOpenInfoBarSlice\";\r\nimport { updateFavData } from \"../../redux/favCountriesSlice\";\r\nimport { RootState, useAppDispatch, useAppSelector } from \"../../redux/store\";\r\nimport { useDatabase } from \"../../hooks/database\";\r\nimport type { ICountries } from \"../../types/globalTypes\";\r\nimport { GlobeCountries } from \"../GlobeCountries/GlobeCountries\";\r\n\r\nexport const CountriesList = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useAppDispatch();\r\n  const params = useParams();\r\n  const {writeUserCountries} = useDatabase();\r\n  const favCountries: string[] = useAppSelector((state: RootState) => state.favCountries.data);\r\n  const countriesObj = useAppSelector((state: RootState) => state.countries);\r\n  const currUser = useAppSelector((state: RootState) => state.currUser.currUser);\r\n  const countriesAll = countriesObj.data;\r\n  const countries: ICountries[] = (countriesObj.currentData) ? countriesObj.currentData : [];\r\n  const favCountriesObj: ICountries[] = (countriesAll) ?\r\n    countriesAll.filter((item: ICountries) => favCountries.includes(item.code)) : [];\r\n  const page = params.part;\r\n  const isVisited = page === 'visited';\r\n  const countriesCurrent: ICountries[] = isVisited ? favCountriesObj : countries;\r\n  const parentRef: RefObject<any> = useRef(null);\r\n  const [parentWidth, setParentWidth] = useState(0);\r\n\r\n  const updateParentWidth = () => {\r\n    setParentWidth(parentRef.current.getBoundingClientRect().width);\r\n  }\r\n\r\n  useLayoutEffect(() => {\r\n    if (parentRef.current) {\r\n      updateParentWidth();\r\n    }\r\n    window.addEventListener('resize', updateParentWidth);\r\n    return () => {\r\n      window.removeEventListener('resize', updateParentWidth);\r\n    }\r\n  }, []);\r\n\r\n  const deleteFavCountry = function (code: string,\r\n                                     showStar: boolean,\r\n                                     changeShowStar: React.Dispatch<React.SetStateAction<boolean>>,\r\n                                     changeShowCountry: React.Dispatch<React.SetStateAction<boolean>>,\r\n  ) {\r\n    if (page === 'visited') {\r\n      changeShowStar(!showStar);\r\n      setTimeout(() => {\r\n        changeShowCountry(true);\r\n      }, 100);\r\n    } else toggleFav(code, showStar, changeShowStar);\r\n  }\r\n  const toggleFav = function (\r\n    code: string,\r\n    showStar: boolean,\r\n    changeShowStar: React.Dispatch<React.SetStateAction<boolean>>\r\n  ) {\r\n    if (currUser) {\r\n      changeShowStar(!showStar);\r\n      let newData = [...favCountries];\r\n      if (newData.includes(code)) {\r\n        newData = favCountries.filter(item => (item !== code));\r\n      } else {\r\n        newData.push(code);\r\n      }\r\n      dispatch(updateFavData(newData));\r\n      writeUserCountries(JSON.stringify(newData));\r\n    } else {\r\n      navigate('/login');\r\n    }\r\n  }\r\n\r\n  const openInfo = (code: string) => {\r\n    if (params.countid && params.countid === code) {\r\n      dispatch(setOpenInfoBar('close'));\r\n    } else {\r\n      if (!params.countid) {\r\n        dispatch(setOpenInfoBar('open'));\r\n      }\r\n      navigate(`/countries/${page}/` + code);\r\n    }\r\n  }\r\n\r\n  const countriesElements = countriesCurrent.map(country =>\r\n    <Country\r\n      key={country.code}\r\n      code={country.code}\r\n      name={country.name}\r\n      isFav={favCountries.includes(country.code)}\r\n      deleteFavCountry={deleteFavCountry}\r\n      toggleFav={toggleFav}\r\n      openInfo={openInfo}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div ref={parentRef} className='CountriesGroup'>\r\n        {isVisited &&\r\n          <>\r\n            {(countriesCurrent.length <= 0) &&\r\n              <p className='navPages'>The list of visited countries is empty...</p>\r\n            }\r\n          </>\r\n        }\r\n        {countriesElements}\r\n        <Outlet/>\r\n        {\r\n          isVisited &&\r\n          <div className='globe_container'>\r\n            <GlobeCountries\r\n              listCodes={countriesCurrent.map(country => country.code.toLowerCase())}\r\n              listNames={countriesCurrent.map(country => country.name.toLowerCase())}\r\n              parentWidth={parentWidth}\r\n            />\r\n          </div>\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n"],"names":["_ref","code","name","isFav","deleteFavCountry","toggleFav","openInfo","nodeRef","React","showCountry","changeShowCountry","useState","showStar","changeShowStar","_jsx","CSSTransition","timeout","classNames","in","onExited","children","ref","className","_jsxs","src","alt","length","onClick","xmlns","height","width","d","fill","stroke","GlobeCountries","parentWidth","listCodes","listNames","polygons","setPolygons","globeRef","useRef","useLayoutEffect","current","controls","enableZoom","fetch","then","res","json","data","features","ReactGlobe","polygonsData","polygonCapColor","includes","properties","ISO_A2","toLowerCase","BRK_NAME","variables","polygonSideColor","polygonStrokeColor","polygonAltitude","globeImageUrl","backgroundColor","labelsData","labelText","labelColor","CountriesList","navigate","useNavigate","dispatch","useAppDispatch","params","useParams","writeUserCountries","useDatabase","favCountries","useAppSelector","state","countriesObj","countries","currUser","countriesAll","currentData","favCountriesObj","filter","item","page","part","isVisited","countriesCurrent","parentRef","setParentWidth","updateParentWidth","getBoundingClientRect","window","addEventListener","removeEventListener","setTimeout","newData","push","updateFavData","JSON","stringify","countid","setOpenInfoBar","countriesElements","map","country","Country","_Fragment","Outlet"],"sourceRoot":""}